const body = document.querySelector("body");
const sizePageTrades = 10;
const hostname = window.location.origin;

// отправляем запрос
async function send_request(url, method) {
  let response = await fetch(url, { method: method });
  if (response.status === 200) {
    let result = await response.json();
    return result;
  }
}

//send_request("https://rbots.ru/api/exchange_info/", "GET")
//.then((table) => {
//	console.log(table);
//})

// заполняем таблицу с биржами новыми данными
function fillTable_exchange() {
  let id_exchanges = "exchangesInfo";
  let table_id = "table";
  let tableCreated = false
  var save_table = {};
  function updateTableContent() {
	send_request("https://rbots.ru/api/exchange_info/", "GET").then((table) => {
		// тут код заполнения таблицы
		var exchange_info = table.exchange_info;
		
		if(!tableCreated) {
			createTable(exchange_info,save_table)
		}
		
	
		for (let i = 0; i < exchange_info.length; i++){
			let name = exchange_info[i].exchange
			let count_trades = +exchange_info[i].count_trades
			let volume_usdt = +exchange_info[i].volume_usdt
			let volume_rub = +exchange_info[i].volume_rub
			
		
			let elem_count_trades = document.getElementById(id_exchanges).rows[i + 1].cells[1].getElementsByClassName("list-content__offers")[0];
			let elem_volume_usdt = document.getElementById(id_exchanges).rows[i + 1].cells[2].getElementsByClassName("list-content__volume-USDT")[0];
			let elem_volume_rub = document.getElementById(id_exchanges).rows[i + 1].cells[3].getElementsByClassName("list-content__volume-RUB")[0];
			
			outNum(count_trades, elem_count_trades, save_table[name]["count_trades"])
			outNum(volume_usdt, elem_volume_usdt, save_table[name]["volume_usdt"], " USDT")
			outNum(volume_rub, elem_volume_rub, save_table[name]["volume_rub"], " RUB")
		}
	
		var count_trades = table.count_trades
		
		let elem_count_trades_1 = document.getElementsByClassName("list-content__title")[0];
		let elem_count_trades_2 = document.getElementsByClassName("footer__item")[1].getElementsByTagName("span")[0];
	
		outNum(count_trades, elem_count_trades_1)
		outNum(count_trades, elem_count_trades_2)
	  });
	  function createRow(data) {
		return `
			<tr class="list-content__item">
			<td><div class="list-content__name">${data.exchange}</div></td>
			<td><div class="list-content__offers">${data.count_trades}</div></td>
			<td><div class="list-content__volume-USDT">${data.volume_usdt}</div></td>
			<td><div class="list-content__volume-RUB">${data.volume_rub}</div></td>
		</tr>
			`;
	  }
	  function createTable(exchange_info,save_table) {
		tableCreated = true
		for (let i = 0; i < exchange_info.length; i++) {
			const current = exchange_info[i];
			document.getElementById(table_id).insertAdjacentHTML('beforeend',createRow(current));
	  
			save_table[current.exchange] = {
				"count_trades": current.count_trades,
				"volume_usdt": current.volume_usdt,
				"volume_rub": current.volume_rub
			}
		  }
	  }
  }
  updateTableContent()
  setInterval(updateTableContent, 30000);
}

// разделяем числа на тысячи
function numberWithSpaces(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}

// бегающие числа
function outNum(num, elem, startNum = -0.01, addStr = "") {
  if (document.visibilityState == "visible") {
    let time = 100;
    let speed = 5;

    let n = startNum;
    if (startNum == -0.01) {
      n = Number(
        elem.textContent
          .replace(/\s/g, "")
          .replace("RUB", "")
          .replace("USDT", "")
      );
    }
    if (n != num) {
      let step = Math.round(Math.abs(num - n) * 0.001 * speed);
      if (step <= 0) {
        step = 1;
      }

      let t = Math.round(time / (num / step));
      let side = "down";
      if (num > n) {
        side = "up";
      }

      let interval = setInterval(() => {
        if (side == "up") {
          n = n + step;
        } else {
          n = n - step;
        }

        let deff = 0;
        if (side == "up") {
          deff = num - n - step;
        } else {
          deff = n - num + step;
        }

        if (deff < step) {
          clearInterval(interval);
          elem.innerHTML = numberWithSpaces(num) + addStr;
        } else {
          elem.innerHTML = numberWithSpaces(n) + addStr;
        }
      }, t);
    } else {
      elem.innerHTML = numberWithSpaces(num) + addStr;
    }
  }
}
fillTable_exchange()


// Acc

function acc() {
  var acc = document.getElementsByClassName("faq__accordion");
  var i;

  for (i = 0; i < acc.length; i++) {
    acc[i].addEventListener("click", function () {
      this.classList.toggle("active");
      var panel = this.nextElementSibling;
      if (panel.style.maxHeight) {
        panel.style.maxHeight = null;
      } else {
        panel.style.maxHeight = `${panel.scrollHeight}px`;
      }
    });
  }
}

acc();

//acc table

function accTable() {
  var acc = document.querySelectorAll(".title-mobile");
  var i;

  for (i = 0; i < acc.length; i++) {
    acc[i].addEventListener("click", function () {
      this.classList.toggle("active");
      var panel = this.nextElementSibling;
      var list = this.parentNode;
      if (panel.style.maxHeight) {
        panel.style.maxHeight = null;
        list.style.border = "1px solid #413D51";
      } else {
        panel.style.maxHeight = `${panel.scrollHeight}px`;
        list.style.border = "1px solid #783AFA";
      }
    });
  }
}

accTable();

// Scroll

function scroll() {
  const menu = document.querySelector(".menu");
  const faq = document.querySelector(".faq__title");
  const helpButtons = document.querySelectorAll(".helpButton");
  console.log(helpButtons);
  helpButtons.forEach((e) => {
    e.addEventListener("click", (e) => {
      e.preventDefault();
      faq.scrollIntoView({ behavior: "smooth" });
      menu.classList.remove("active");
      body.classList.remove("modal-open");
    });
  });
}

scroll();

// Burger-menu

let menu = document.querySelector(".menu");

function burger() {
  let menuBtn = document.querySelector(".menu-btn");
  let menu = document.querySelector(".menu");
  menuBtn.addEventListener("click", function () {
    menu.classList.toggle("active");
    if (menu.classList.contains("active")) {
      body.classList.add("modal-open");
    } else {
      body.classList.remove("modal-open");
      dropdownBurger.style.maxHeight = null;
    }
  });
}

burger();

// Modal

const signInForm = document.querySelector(".sign-in-form");
const registerForm = document.querySelector(".register-form");
const signInBtn = document.querySelector(".sign-in-form__link a");
const registerBtn = document.querySelector(".register-form__link a");
const signButton = document.querySelector(".sign-in-form__button");
const registerButton = document.querySelector(".register-form__button");
const closeModal = document.querySelector(".close");
const navBtn = document.querySelectorAll(".signIn-btn");
const modal = document.querySelector(".modal");
const dropdown = document.querySelector(".navbar__dropdown-list");
const navBtnBurger = document.querySelector(".signIn-btn-burger");
const dropdownBurger = document.querySelector(".navbar__dropdown-list-burger");
const inputButtons = document.querySelectorAll(".input-button");
const currenciesForm = document.querySelector(".currencies-form");
const filterForm = document.querySelector(".modal-content .filter-form");
const s = document.querySelector(".currencies__cryptocurrency-choice");
const item = document.querySelectorAll(".trading-content__item");

const inputs = document.querySelectorAll(".inputs-trade");

const tradingContentButton = document.querySelector(".trading-content__button");

const inputButtonFiat = document.querySelector(".trading-content__fiat");
const inputButtonAsset = document.querySelector(".trading-content__asset");

function itemLengthCheck() {
  let item = document.querySelectorAll(".trading-content__item");
  if (item.length <= 1) {
    tradingContentButton.classList.add("block-button");
  } else if (item.length == 2) {
    tradingContentButton.classList.remove("block-button");
  }
}

function showForm(form) {
  if (form == registerForm) {
    signInForm.classList.add("none");
    currenciesForm.classList.add("none");
    if (filterForm) {
      filterForm.classList.add("none");
    }

    registerForm.classList.remove("none");
  } else if (form == signInForm) {
    registerForm.classList.add("none");
    currenciesForm.classList.add("none");
    if (filterForm) {
      filterForm.classList.add("none");
    }

    signInForm.classList.remove("none");
  } else if (form == currenciesForm) {
    registerForm.classList.add("none");
    signInForm.classList.add("none");
    if (filterForm) {
      filterForm.classList.add("none");
    }

    currenciesForm.classList.remove("none");
  } else if (form == filterForm) {
    registerForm.classList.add("none");
    signInForm.classList.add("none");
    currenciesForm.classList.add("none");

    if (filterForm) {
      filterForm.classList.remove("none");
    }
  }
}

signInBtn.addEventListener("click", (e) => {
  e.preventDefault();

  showForm(registerForm);
});

registerBtn.addEventListener("click", (e) => {
  e.preventDefault();

  showForm(signInForm);
});

closeModal.addEventListener("click", (e) => {
  e.preventDefault();

  modal.style.display = "none";
  body.classList.remove("modal-open");

  showForm(signInForm);
});

navBtn.forEach((e) => {
  e.addEventListener("click", (e) => {
    e.preventDefault();

    var dropdown = document.querySelector(".navbar__dropdown-list");
    if (e.target.dataset.sign == "true") {
      if (dropdown.style.display == "block") {
        dropdown.style.display = "none";
      } else {
        dropdown.style.display = "block";
      }
    } else {
      if (menu.classList.contains("active")) {
        menu.classList.remove("active");
      }

      modal.style.display = "block";
      modal.dataset.open = "true";

      body.classList.add("modal-open");
      showForm(signInForm);
    }
  });
});

navBtnBurger.addEventListener("click", (e) => {
  e.preventDefault();

  if (e.target.dataset.sign == "true") {
    dropdownBurger.classList.toggle("active");
    if (dropdownBurger.style.maxHeight) {
      dropdownBurger.style.maxHeight = null;
    } else {
      dropdownBurger.style.maxHeight = `${dropdownBurger.scrollHeight}px`;
    }
  } else {
    if (menu.classList.contains("active")) {
      menu.classList.remove("active");
    }

    modal.style.display = "block";
    modal.dataset.open = "true";

    body.classList.add("modal-open");

    showForm(signInForm);
  }
});

// получаем параметры из ссылки
function getParamsUrl() {
  var params = window.location.search
    .replace("?", "")
    .split("&")
    .reduce(function (p, e) {
      var a = e.split("=");
      p[decodeURIComponent(a[0])] = decodeURIComponent(a[1]);
      return p;
    }, {});

  return params;
}

// проверка страницы
function checkPage(page_str) {
  data_url = window.location.pathname.split("/");
  for (let i = 0; i < data_url.length; i++) {
    if (page_str == data_url[i]) {
      return true;
    }
  }

  return false;
}

// создание таблицы сделок
function create_table_trades() {
  if (checkPage("offers")) {
    let params = window.location.pathname.split("/")[2].split("-");

    let fiat = params[0];
    let asset = params[1];
    let side = document
      .querySelector(".trading-results__results-table")
      .getAttribute("side");

    let url_api = `https://rbots.ru/api/trades/?fiat=${fiat}&asset=${asset}&side=${side}`;
    if (side == "SELL") {
      url_api = `https://rbots.ru/api/trades/?fiat=${asset}&asset=${fiat}&side=${side}`;
    }

    $.ajax({
      type: "GET",
      url: url_api,
      data: {},
      success: function (trades) {
        console.log(trades);
        if (window.screen.width <= 850) {
          view_tabel_trades_mob(trades);
        } else {
          view_tabel_trades_pk(trades);
        }
      },
    });
  }
}

// заполнение сделок под пк
function view_tabel_trades_pk(trades) {
  const table = document.querySelector(".trading-results__results-table tbody");

  outNum(
    trades.trades.length,
    document.querySelector(".trading-results__count")
  );

  table.innerHTML = "";

  let j = 0;
  for (let i = 0; i < trades.trades.length; i++) {
    el = trades.trades[i];
    const newItem = document.createElement("tr");

    newItem.innerHTML = `
			<td class="trading-results__results-td">${el.nickname}</td>
			<td class="trading-results__results-td">${el.exchange}</td>
			<td class="trading-results__results-td">${el.trademethods}</td>
			<td class="trading-results__results-td results-give">${el.price} ${el.fiat}
				<div class="trading-results__results-subtitle-give">${el.minamount} - ${el.maxamount}</div>
			</td>
			<td class="trading-results__results-td"><svg xmlns="http://www.w3.org/2000/svg" width="17" height="9" viewBox="0 0 17 9" fill="none">
			<path d="M16 4.5H1M16 4.5L12.6667 8M16 4.5L12.6667 1" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
			</svg></td>
			<td class="trading-results__results-td results-recieve">1 ${el.asset}
				<div class="trading-results__results-subtitle-recieve">Резерв: ${el.quantity} </div>
			</td>
		`;

    table.insertAdjacentElement("beforeend", newItem);

    j++;
    if (j == sizePageTrades) {
      break;
    }
  }
}

// заполнение сделок под мобилки
function view_tabel_trades_mob(trades) {
  const table = document.querySelector(".trading-results__table-mobile tbody");

  outNum(
    trades.trades.length,
    document.querySelector(".trading-results__count")
  );

  //table.innerHTML = ""

  let j = 0;
  for (let i = 0; i < trades.trades.length; i++) {
    el = trades.trades[i];

    const listMobile = document.querySelector(".trading-results__list-mobile");
    const newItem = document.createElement("div");
    newItem.classList.add("trading-results__item-mobile");
    newItem.classList.add("item-mobile");

    newItem.innerHTML = `
					<div class="trading-results__title-mobile title-mobile">
						<div class="title-container">
							<div class="trading-results__name-mobile name-mobile">${el.exchange}</div>
							<div class="trading-results__offers-mobile offers-mobile">(154 768)</div>
							<div class="trading-results__img-mobile img-container"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="14" viewBox="0 0 24 14" fill="none">
							<path d="M21.7989 1.89933L11.8994 11.7988L1.99992 1.89933" stroke="#783AFA" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
							</svg></div>
						</div>
							<div class="trading-results__subtitle-mobile"><span class="results-give">1 USDT</span><svg xmlns="http://www.w3.org/2000/svg" width="17" height="9" viewBox="0 0 17 9" fill="white">
							<path d="M16 4.5H1M16 4.5L12.6667 8M16 4.5L12.6667 1" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
							</svg><span class="results-recieve">69,54 RUB</span></div>
					</div>


					<div class="trading-results__panel panel">
						<div class="trading-results__volume-USDT-mobile volume-USDT-mobile title">Платформа
							<div class="trading-results__volume-USDT-mobile-count volume-USDT-mobile-count">${el.exchange}</div>
						</div>

						<div class="trading-results__volume-RUB-mobile volume-RUB-mobile title">Оплата
							<div class="trading-results__volume-RUB-mobile-count volume-RUB-mobile-count">${el.trademethods}</div>
						</div>

						<div class="trading-results__offers title">Отдаете
							<div class="trading-results__offers-mobile-count offers-mobile-count">1 ${el.asset}
								<div class="trading-results__subtitle-give-mobile results-give ">${el.minamount} - ${el.maxamount}</div>
							</div>
						</div>

						<div class="trading-results__offers title">Получаете
							<div class="trading-results__offers-mobile-count offers-mobile-count">{el.price} ${el.fiat}
								<div class="trading-results__subtitle-recieve-mobile results-recieve">Резерв: ${el.quantity}</div>
							</div>					
						</div>

						<div class="trading-results__arrow-link"><a href="${el.url}"><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 15 15" fill="white">
						<path d="M11.8751 11.4062C11.9938 11.4062 12.1126 11.3624 12.2063 11.2687C12.3876 11.0874 12.3876 10.7874 12.2063 10.6062L3.45635 1.85615C3.2751 1.6749 2.9751 1.6749 2.79385 1.85615C2.6126 2.0374 2.6126 2.3374 2.79385 2.51865L11.5438 11.2687C11.6376 11.3624 11.7563 11.4062 11.8751 11.4062Z" fill="white"/>
						<path d="M5.45625 11.4061H11.875C12.1312 11.4061 12.3438 11.1936 12.3438 10.9373V4.51855C12.3438 4.2623 12.1312 4.0498 11.875 4.0498C11.6187 4.0498 11.4062 4.2623 11.4062 4.51855V10.4686H5.45625C5.2 10.4686 4.9875 10.6811 4.9875 10.9373C4.9875 11.1936 5.2 11.4061 5.45625 11.4061Z" fill="white"/>
						<path d="M2.1875 14.2188H12.8125C13.0687 14.2188 13.2812 14.0062 13.2812 13.75C13.2812 13.4938 13.0687 13.2812 12.8125 13.2812H2.1875C1.93125 13.2812 1.71875 13.4938 1.71875 13.75C1.71875 14.0062 1.93125 14.2188 2.1875 14.2188Z" fill="white"/>
						</svg></a></div>
					</div>
		`;

    listMobile.insertAdjacentElement("beforeend", newItem);

    j++;
    if (j == sizePageTrades) {
      break;
    }
  }
}

create_table_trades();
tradingContentButton.addEventListener("click", (e) => {
  //create_table_trades()

  if (document.querySelectorAll(".trading-content__item").length == 2) {
    let fiat = inputButtonFiat.querySelector(
      ".trading-content__item"
    ).textContent;
    let asset = inputButtonAsset.querySelector(
      ".trading-content__item"
    ).textContent;

    document.location.href = hostname + `/offers/${fiat}-${asset}`;
  }
});

document.querySelector(".menu").addEventListener("click", (e) => {
  if (
    e.target.className != "navbar__dropdown-list-burger" &&
    e.target.className != "signIn-btn-burger"
  ) {
    dropdownBurger.style.maxHeight = null;
  }
});

modal.addEventListener("click", (e) => {
  if (e.target == modal) {
    modal.style.display = "none";
    body.classList.remove("modal-open");

    showForm(signInForm);
  }
});

const dropdownFilter = document.querySelector(".dropdown-filter");
document.addEventListener("click", (e) => {
  var dropdown = document.querySelector(".navbar__dropdown-list");
  if (
    e.target.className != "navbar__dropdown-list" &&
    e.target.className != "signIn-btn"
  ) {
    dropdown.style.display = "none";
  }
});

signInForm.addEventListener("submit", (e) => {
  e.preventDefault();
});

registerForm.addEventListener("submit", (e) => {
  e.preventDefault();
});

var inputButtonFiatorAsset;

inputButtonFiat.addEventListener("click", (el) => {
  let target = el.target;
  el = inputButtonFiat;
  if (target != inputButtonFiat && target != inputButtonFiat.firstChild) {
    closeInput(inputButtonFiat, el);
  } else {
    inputAssetFist(el);
  }
  //inputButtonFiatorAsset = inputButtonFiat
});

inputButtonAsset.addEventListener("click", (el) => {
  let target = el.target;
  el = inputButtonAsset;
  if (target != inputButtonAsset && target != inputButtonAsset.firstChild) {
    closeInput(inputButtonAsset, el);
  } else {
    inputAssetFist(el);
  }
  //inputButtonFiatorAsset = inputButtonAsset
});

s.addEventListener("click", (elem) => {
  let target = elem.target;

  if (target.classList.contains("currencies__item-choice")) {
    modal.style.display = "none";
    body.classList.remove("modal-open");

    inputButtonFiatorAsset.innerHTML = ``;

    let itemNew = document.createElement("div");
    itemNew.classList.add("trading-content__item");

    let closeCross = document.createElement("span");
    closeCross.classList.add("close-cross");
    closeCross.innerHTML = `
			<svg data-close="close" xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26" fill="none">
			<path data-close="close" d="M9 9L17 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
			<path data-close="close" d="M17 9L9.00001 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
			<rect data-close="close" x="0.5" y="0.5" width="25" height="25" rx="7.5" stroke="white"/>
			</svg>
		`;

    itemNew.innerHTML = target.innerHTML;

    inputButtonFiatorAsset.insertAdjacentElement("afterbegin", closeCross);
    inputButtonFiatorAsset.insertAdjacentElement("afterbegin", itemNew);
  }

  if (inputButtonFiatorAsset.firstChild) {
    inputButtonFiatorAsset.classList.add("active-trade");
  }

  itemLengthCheck();
});

function inputAssetFist(el) {
  let classEl = el;

  if (
    classEl.classList.contains("trading-content__fiat") ||
    classEl.classList.contains("trading-content__fiat active-trade")
  ) {
    inputButtonFiatorAsset = inputButtonFiat;
  }
  if (
    classEl.classList.contains("trading-content__asset") ||
    classEl.classList.contains("trading-content__asset active-trade")
  ) {
    inputButtonFiatorAsset = inputButtonAsset;
  }

  modal.style.display = "block";
  showForm(currenciesForm);
  body.classList.add("modal-open");

  //------------------
}

//авторизация
$(document).ready(function () {
  $("#loginButton").click(function () {
    ajaxLogin();
  });
});

function ajaxLogin() {
  $.ajax({
    type: "POST",
    url: "/login/",
    data: {
      username_signin: $("input[name=username_signin]").val(),
      password_signin: $("input[name=password_signin]").val(),
      csrfmiddlewaretoken: $('input[name="csrfmiddlewaretoken"]').attr("value"),
    },
    success: function (result) {
      if (result.status == "ok") {
        location.reload();
      } else {
        $("p[class=sign-in-form__error]").text(result.error);
      }
    },
  });
  return false;
}

//регистрация
$(document).ready(function () {
  $("#registerButton").click(function () {
    ajaxRegister();
  });
});

function ajaxRegister() {
  $.ajax({
    type: "POST",
    url: "/register/",
    data: {
      username: $("input[name=username]").val(),
      email: $("input[name=email]").val(),
      password: $("input[name=password]").val(),
      password2: $("input[name=password2]").val(),
      csrfmiddlewaretoken: $('input[name="csrfmiddlewaretoken"]').attr("value"),
    },
    success: function (result) {
      if (result.status == "ok") {
        location.reload();
      } else {
        $("p[class=register-form__error]").text(result.error);
      }
    },
  });
  return false;
}

/////////////////////////////////////////

function accResults() {
  var acc = document.querySelectorAll(".filter-button");

  acc.forEach((el) => {
    el.addEventListener("click", (elem) => {
      elem.preventDefault();
      el.classList.toggle("active");
      var panel = el.nextElementSibling;
      if (panel.style.maxHeight) {
        panel.style.maxHeight = null;
        el.style.paddingBottom = null;
      } else {
        el.style.paddingBottom = `38px`;
        panel.style.maxHeight = `${175}px`;
      }
    });
  });
}

accResults();

////////////////////////////

inputButtonFiat.addEventListener("mouseover", (elem) => {
  mouseOverCloseCross(inputButtonFiat, elem);
});

inputButtonFiat.addEventListener("mouseout", () => {
  inputButtonFiat.classList.remove("hover");
});

inputButtonAsset.addEventListener("mouseover", (elem) => {
  mouseOverCloseCross(inputButtonAsset, elem);
});

inputButtonAsset.addEventListener("mouseout", () => {
  inputButtonAsset.classList.remove("hover");
});

function mouseOverCloseCross(inputButton, elem) {
  inputButton.classList.add("hover");

  let target = elem.target;
  if (target != inputButton && target != inputButton.firstChild) {
    inputButton.classList.remove("hover");
  }
}

function closeInput(inputButton, elem) {
  let target = elem.target;
  if (target != inputButton && target != inputButton.firstChild) {
    inputButton.innerHTML = ``;
    inputButton.classList.remove("active-trade");
  }
  itemLengthCheck();
}

const swapButton = document.querySelector(".trading-content__arrows");

swapButton.addEventListener("click", () => {
  if (item.length == 0) {
    return;
  } else if (item.length == 1) {
    let a = item[0].innerHTML;
    if (inputButtonFiat.classList.contains("active-trade")) {
      inputButtonFiat.innerHTML = ``;
      inputButtonAsset.innerHTML = `
			<div class="trading-content__item">${a}</div>
			<svg data-close="close" xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26" fill="none">
		<path data-close="close" d="M9 9L17 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
		<path data-close="close" d="M17 9L9.00001 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
		<rect data-close="close" x="0.5" y="0.5" width="25" height="25" rx="7.5" stroke="white"/>
		</svg>
			`;
      inputButtonFiat.classList.toggle("active-trade");
      inputButtonAsset.classList.toggle("active-trade");
    } else if (inputButtonAsset.classList.contains("active-trade")) {
      inputButtonAsset.innerHTML = ``;
      inputButtonFiat.innerHTML = `
			<div class="trading-content__item">${a}</div>
			<svg data-close="close" xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26" fill="none">
		<path data-close="close" d="M9 9L17 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
		<path data-close="close" d="M17 9L9.00001 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
		<rect data-close="close" x="0.5" y="0.5" width="25" height="25" rx="7.5" stroke="white"/>
		</svg>
			`;
      inputButtonFiat.classList.toggle("active-trade");
      inputButtonAsset.classList.toggle("active-trade");
    }
  } else {
    item[0].innerHTML = item[1].innerHTML;
    item[1].innerHTML = a;
  }
});

////////////////////////////////////////////

const popularButtons = document.querySelector(".trading-content__buttons");
const popularButton = document.querySelectorAll(
  ".trading-content__button-popular"
);

popularButtons.addEventListener("click", (e) => {
  e.preventDefault();

  let target = e.target;
  popularButton.forEach((el) => {
    if (target == el) {
      let b = target.innerHTML.split(" &gt; ");

      inputButtonFiat.innerHTML = `
				<div class="trading-content__item">${b[0]}</div>
				<svg data-close="close" xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26" fill="none">
			<path data-close="close" d="M9 9L17 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
			<path data-close="close" d="M17 9L9.00001 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
			<rect data-close="close" x="0.5" y="0.5" width="25" height="25" rx="7.5" stroke="white"/>
			</svg>
			`;

      inputButtonAsset.innerHTML = `
				<div class="trading-content__item">${b[1]}</div>
				<svg data-close="close" xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 26 26" fill="none">
			<path data-close="close" d="M9 9L17 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
			<path data-close="close" d="M17 9L9.00001 17" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
			<rect data-close="close" x="0.5" y="0.5" width="25" height="25" rx="7.5" stroke="white"/>
			</svg>
			`;

      inputButtonFiat.classList.add("active-trade");
      inputButtonAsset.classList.add("active-trade");
    }
  });
  itemLengthCheck();
});

/////////////////////////////////////

const filterButtonModal = document.querySelector(
  ".trading-results__filter-button-modal"
);

if (checkPage("offers")) {
  filterButtonModal.addEventListener("click", (el) => {
    el.preventDefault();

    modal.style.display = "block";
    modal.dataset.open = "true";

    body.classList.add("modal-open");

    showForm(filterForm);
  });
}

//////////////////////////
// Filter
//////////////////////////

const searchFilter = document.querySelector(".filter-form__search-input input");
if (checkPage("offers")) {
  searchFilter.addEventListener("keyup", () => {
    dropdownFilter.style.display = `flex`;
    filterFunction();
  });
}

function filterFunction() {
  var input, filter, ul, li, a, i;
  input = searchFilter;
  filter = input.value.toUpperCase();
  let div = document.querySelector(".filter-form__search-input");
  a = div.getElementsByTagName("a");
  for (i = 0; i < a.length; i++) {
    let txtValue = a[i].textContent || a[i].innerText;
    if (txtValue.toUpperCase().indexOf(filter) > -1) {
      a[i].style.display = "";
    } else {
      a[i].style.display = "none";
    }
  }

  if (input.value == 0) {
    dropdownFilter.style.display = `none`;
  }
}

if (checkPage("offers")) {
  dropdownFilter.addEventListener("click", (e) => {
    e.preventDefault();

    if ((e.target.id = `qiwi-dropdown`)) {
      let checkbox = document.querySelector("#qiwi-checkbox input");
      checkbox.checked = "true";
    }
  });
}

function elementWidthChangeOnChild() {
  if (checkPage("offers")) {
    let width = document.querySelector(
      ".filter-form__search-input input"
    ).offsetWidth;
    dropdownFilter.style.width = `${width}px`;
  }
}
elementWidthChangeOnChild();

window.addEventListener("resize", function () {
  elementWidthChangeOnChild();
});
